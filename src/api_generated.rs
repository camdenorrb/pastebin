// automatically generated by the FlatBuffers compiler, do not modify

#![allow(warnings)]
#![allow(clippy)]
#![allow(unknown_lints)]

use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod api {

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum EntryOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Entry<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Entry<'a> {
    type Inner = Entry<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Entry<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Entry {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args EntryArgs<'args>) -> flatbuffers::WIPOffset<Entry<'bldr>> {
      let mut builder = EntryBuilder::new(_fbb);
      builder.add_expiry_timestamp(args.expiry_timestamp);
      builder.add_create_timestamp(args.create_timestamp);
      if let Some(x) = args.lang { builder.add_lang(x); }
      if let Some(x) = args.data { builder.add_data(x); }
      builder.add_encrypted(args.encrypted);
      builder.add_burn(args.burn);
      builder.finish()
    }

    pub const VT_CREATE_TIMESTAMP: flatbuffers::VOffsetT = 4;
    pub const VT_EXPIRY_TIMESTAMP: flatbuffers::VOffsetT = 6;
    pub const VT_DATA: flatbuffers::VOffsetT = 8;
    pub const VT_LANG: flatbuffers::VOffsetT = 10;
    pub const VT_BURN: flatbuffers::VOffsetT = 12;
    pub const VT_ENCRYPTED: flatbuffers::VOffsetT = 14;

  #[inline]
  pub fn create_timestamp(&self) -> u64 {
    self._tab.get::<u64>(Entry::VT_CREATE_TIMESTAMP, Some(0)).unwrap()
  }
  #[inline]
  pub fn expiry_timestamp(&self) -> u64 {
    self._tab.get::<u64>(Entry::VT_EXPIRY_TIMESTAMP, Some(0)).unwrap()
  }
  #[inline]
  pub fn data(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(Entry::VT_DATA, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn lang(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Entry::VT_LANG, None)
  }
  #[inline]
  pub fn burn(&self) -> bool {
    self._tab.get::<bool>(Entry::VT_BURN, Some(false)).unwrap()
  }
  #[inline]
  pub fn encrypted(&self) -> bool {
    self._tab.get::<bool>(Entry::VT_ENCRYPTED, Some(false)).unwrap()
  }
}

pub struct EntryArgs<'a> {
    pub create_timestamp: u64,
    pub expiry_timestamp: u64,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub lang: Option<flatbuffers::WIPOffset<&'a  str>>,
    pub burn: bool,
    pub encrypted: bool,
}
impl<'a> Default for EntryArgs<'a> {
    #[inline]
    fn default() -> Self {
        EntryArgs {
            create_timestamp: 0,
            expiry_timestamp: 0,
            data: None,
            lang: None,
            burn: false,
            encrypted: false,
        }
    }
}
pub struct EntryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> EntryBuilder<'a, 'b> {
  #[inline]
  pub fn add_create_timestamp(&mut self, create_timestamp: u64) {
    self.fbb_.push_slot::<u64>(Entry::VT_CREATE_TIMESTAMP, create_timestamp, 0);
  }
  #[inline]
  pub fn add_expiry_timestamp(&mut self, expiry_timestamp: u64) {
    self.fbb_.push_slot::<u64>(Entry::VT_EXPIRY_TIMESTAMP, expiry_timestamp, 0);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_DATA, data);
  }
  #[inline]
  pub fn add_lang(&mut self, lang: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Entry::VT_LANG, lang);
  }
  #[inline]
  pub fn add_burn(&mut self, burn: bool) {
    self.fbb_.push_slot::<bool>(Entry::VT_BURN, burn, false);
  }
  #[inline]
  pub fn add_encrypted(&mut self, encrypted: bool) {
    self.fbb_.push_slot::<bool>(Entry::VT_ENCRYPTED, encrypted, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> EntryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    EntryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Entry<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_entry<'a>(buf: &'a [u8]) -> Entry<'a> {
    unsafe { flatbuffers::root_unchecked::<Entry<'a>>(buf) }
}

#[inline]
pub fn get_size_prefixed_root_as_entry<'a>(buf: &'a [u8]) -> Entry<'a> {
    unsafe { flatbuffers::size_prefixed_root_unchecked::<Entry<'a>>(buf) }
}

#[inline]
pub fn finish_entry_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Entry<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_entry_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Entry<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod api

